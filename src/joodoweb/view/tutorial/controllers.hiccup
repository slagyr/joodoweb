[:h2 "Building A Controller"]

[:h4 "Controllers in Joodo"]
[:p "Joodo's project template does include a controller directory, since it embraces all types of project design patterns.  However, MVC is a common and popular pattern, and it takes little effort to change the default Joodo template into an MVC design."]
[:p "Let's start by creating a controller directory inside src/clj/. Our controller directory can be empty for now. However as projects grow, this directory will become more and more important."]
[:p "Each controller file will not only contain \"normal\" controller functions but will also contain the routes that are related to that controller. This means that, unlike rails, each controller is responsible for its own routes."]

[:h3 "Step 1: Make Your First Controller"]
[:p "For our purposes, we will want to create a posts controller that has all of the routing information for our blog posts."]

[:h5 "Create Your Files"]
[:p "Since we are using TDD, let's make our src and our spec file - create these two files: " [:b "src/sample_app/clj/controller/post_controller.clj"] " and " [:b "spec/clj/sample_app/controller/post_controller_spec.clj"]]
[:p "In the 'post_controller_spec.clj' file add the following code:"]
[:pre {:class "brush: clojure"}
"(ns sample-app.controller.post-controller-spec
  (:require [speclj.core :refer [describe around it should= run-specs]]
            [joodo.spec-helpers.controller :refer [do-get rendered-template rendered-context
                                                   with-mock-rendering with-routes]]
            [sample-app.controller.post-controller :refer [post-controller]]))

(describe \"post-controller\"
  (with-mock-rendering)
  (with-routes post-controller)

  (it \"directs to the not_found page if the blog post isn't specified\"
    (let [result (do-get \"/post\")]
      (should= 404 (:status result))
      (should= \"not_found\" @rendered-template)
      (should= \"You must specify a blog post.\" (:error @rendered-context)))))"]

[:p "Now let's see how Speclj and Joodo spec helper are helping us test our controller:"]
[:p "First, let's look at (with-mock-rendering).  This function call tells Joodo to keep track of all files rendered without actually rendering them."]
[:p "Second, let's look at (with-routes).  This function tells Joodo to use the routes listed in the specified var (in our case it is post-controller). We also need to ':refer' the controller functions we'll be using to test our controller."]
[:p "Third, let's look at our test.  Within our test we are asserting that if a client sends a get request to the /post uri, they will get a response with a status of 404, the not_found page will display, and an error message will get passed."]

[:h5 "Run Your Test"]
[:p "Before you run your test, make sure you understand the TDD development work flow.  For <b>every</b> test we write, it should first <b>fail</b>, then you should write the source code that makes it <b>pass</b>, and finally you should go back and <b>refactor</b> your code and and your tests so that they are clean and efficient. The shortened term for this process is \"Red-Green-Refactor\""]
[:p "Now run your tests from the terminal by using Speclj.  Speclj will look in your spec/ directory for all files with '_spec' in its name, much like Ruby's rspec.  If you want to simply run your tests once, the command will be:"]
[:pre {:class "brush: clojure"} "lein spec"]
[:p "However Speclj has an autorun feature that will run your failing tests after the test or its related source file changes.  This is great for a TDD workflow since you can immediately see how your changes affected your tests.  This is the recommended approach.  To start Speclj autorun type:"]
[:pre {:class "brush: clojure"} "lein spec -a"]
[:p "You should get an error message stating that no namespace called sample-app.controller.post-controller exists. Let's remedy that by adding the following code into the " [:b "src/sample_app/controller/post_controller.clj"] " file we created:"]
[:pre {:class "brush: clojure"}
"(ns sample-app.controller.post-controller
  (:require [compojure.core :refer (GET defroutes)]
            [joodo.views :refer (render-template)]))

(defn- render-not-found [error-msg]
  {:status 404
   :headers {}
   :body (render-template \"not_found\" :error error-msg)})

(defroutes post-controller
  (GET \"/post\" [] (render-not-found \"You must specify a blog post.\")))"]
[:p "This code defines our post-controller var and populates it with one route. When the " [:b "/post"] " route hits, the response is sent back with a status of 404, a body filled with the data stored in the not_found template, and an error message gets passed through as a flash message."]

[:h5 "Note: Your defroutes function must have the same name as your controller file - In this example the post-controller namespace has the function '(defroutes post-controller)'"]
[:p "A common mistake for controllers is not starting your route with the controller name. For example, we can't list routes in our post controller that start with anything other than post. Another important thing to note is that if we don't include a var named post-controller, none of our routes will get loaded. So if you had a controller named happy_controller.clj, Joodo will expect a var called happy-controller to exist and contain all of the routes from that controller."]

[:h3 "Step 2: Beyond the First Test To Something More Complicated"]

[:p "Now that we have our first passing test, it is time to create a route that will display the specified blog post. But first, let's add the tests for that code to our existing post-controller-spec:"]

[:p "To create our tests we'll need to create two folders.  Create <b>spec/clj/view/</b> and within this folder create <b>test_posts/</b>"]

[:p "Next, Add 'blog-post-directory' to the :refer array for sample-app.controller.post-controller at the top of your post_controller_spec.clj file. "]

[:p "Now we're ready to write our tests. Add the code below to your existing post-controller-spec.clj file:"]
[:pre {:class "brush: clojure"}
";* Add 'blog-post-directory' to the refer array for sample-app.controller.post-controller
;* at the top of your post_controller_spec.clj file.

;* Also, create a test_posts directory as described in the instructions above
;* to make these tests to pass.

(around [it]
  (binding [blog-post-directory (clojure.java.io/file (str
             (. (java.io.File. \".\") getCanonicalPath)
             \"/spec/clj/sample_app/view/test_posts\"))]
    (it)))

(it \"directs to the blog post if the post exists\"
  (let [result (do-get \"/post/20111215_test-post\")]
    (should= 200 (:status result))
    (should= \"posts/20111215_test-post\" @rendered-template)))

(it \"directs to the not_found page if the post doesn't exist\"
  (let [result (do-get \"/post/20111215_invalid\")]
    (should= 404 (:status result))
    (should= \"not_found\" @rendered-template)
    (should= \"Blog post does not exist.\" (:error @rendered-context))))"
]

[:p "That's a lot of code so let's talk about it:"]
[:p "What does this assert? Our new tests assert that if a blog post exists, a route will be created for it. This test fails because there is no such var called blog-post-directory."]
[:p "What is that 'around' function doing? The around function binds any calls to blog-post-directory to a test_posts directory that we use to create mock blog posts.  Thus, we are effectively replacing the blog-post-directory path with a test path."]


[:p "Let's now make a test blog file that we can test against.  Let's call it " [:b "20111215_test-post.hiccup"] " in let's put it in the " [:b "/spec/clj/sample_app/view/test_posts"] " directory. Now we have a test blog that we can assert against in our tests!"]
[:p "In the test-post file add:"]
[:pre {:class "brush: clojure"}
  "[:h1 \"Hello World, this is a Test Post for my new Joodo App\"]
   [:p \"heres some more content, do you notice that :h1 and :p look a lot like HTML tags?\"]
   [:br]
   [:p \"Actually, that's what\" [:b \"hiccup\"] \" does. It allows you to write HTML as if it was all just clojure data structures! That's crazy!\"]"
 ]

[:p "After we have our mock test file, we are ready to write the controller logic to make those failing tests pass. Update the code in your post-controller so that it now looks like this:"]
[:pre {:class "brush: clojure"}
"(ns sample-app.controller.post-controller
  (:require [compojure.core :refer [GET context defroutes]]
            [joodo.views :refer [render-template]]))

(def ^{:private true} current-path
  (. (java.io.File. \".\") getCanonicalPath))

(def ^:dynamic blog-post-directory
  (clojure.java.io/file (str current-path \"/src/clj/sample_app/view/posts\")))

(defn blog-post-filenames []
  (map
    #(.getName %)
    (remove
      #(.isDirectory %)
      (file-seq blog-post-directory))))

(defn- blog-post-exists? [post-route]
  (some #(= % (str post-route \".hiccup\")) (blog-post-filenames)))

(defn- render-not-found [error-msg]
  {:status 404
   :headers {}
   :body (render-template \"not_found\" :error error-msg)})

(defn- render-post [post-route]
  (if (blog-post-exists? post-route)
    (render-template (str \"view/posts/\" post-route))
    (render-not-found \"Blog post does not exist.\")))

(defroutes post-controller
  (GET \"/post\" [] (render-not-found \"You must specify a blog post.\"))
  (context \"/post\" []
    (GET \"/:post-route\" [post-route] (render-post post-route))))"]
[:p "Now if you run the tests they should pass."]
[:p "Whoa, that was a lot of code again.  Let's break it down:"]
[:p "What are we doing? We are testing that our controller handles routes for all existing blog post files. Our tests pass because we created a test blog post. Note that we had to explicitly declare the blog-post-directory var " [:b "^:dynamic"] " so that we could re-bind it in our test. This is a change in Clojure 1.2. In earlier versions vars were dynamic by default."]
[:p "So why do we even need a mock blog file?  Why not use a real blog post?  By creating a test file and rebinding blog-post-directory we can isolate our tests to a known (and hopefully unchanging) file.  Actual production files can change.  This removes the risk of a production change inintentionally breaking tests"]
[:p "And why is that .hiccup file titled with all those numbers?  Those numbers are a specific date.  Later we can use that information to sort multiple blog posts by date.  In other words, just go with it for now."]
[:h3 "Step 3: Tests Pass! Now Let's Make A Real Blog Post!"]
[:p "To get a real blog post to serve up, lets make a real blog post called " [:b "20111215_first-post.hiccup"] " and put it in the " [:b "/src/sample_app/view/posts"] " directory.  Since the \"around\" rebinding only occurs in the test file, the normal blog-post-directory path will work."]
[:p "Now, if you open up your browser with your local server running (type " [:b "lein ring server"] " in the command line) and go to " [:a {:href "http://localhost:3000/post/20111215_first-post" :target "_blank"} "http://localhost:3000/post/20111215_first-post"] ", you will see your blog post."]
[:br][:br]
[:a {:href "/tutorial/basics"} "<-- Previous Step (Basics)"]
[:span " | "]
[:a {:href "/tutorial/views"} "Next Step (Views) -->"]