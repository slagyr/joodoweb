[:h1 "----------------------------------------"]
[:h1 "WARNING:  This Tutorial is not up-to-date for Joodo 2.x.  We'll have it updated shortly!"]
[:h1 "----------------------------------------"]


[:h2 "sample application"]

[:h3 "Before You Start"]

[:h4 "What Is The Goal Of This Tutorial?"]
[:p "In this section, we will build a simple blogging platform to show you how easy it is to build a site with Joodo.
This application won't be a fully-features web app, but it will teach you the basics of Joodo.  "]

[:h4 "What Do I Gain from Completing This Tutorial?"]
[:p "Here are just a few things that you will learning by completing this tutorial:"]
[:ul.tutorial_list
 [:li "Increase your clojure skills - clojure a powerful, beautiful, and increasingly popular development language."]
 [:li "Learn about the clojure web stack - the clojure web stack a powerful tool that can be written almost entirely in a single language: clojure"]
 [:li "Smooth Test Driven Development - TDD can be hard, especially when testing web stacks.  This tutorial introduces you to fast web stack development where tests come first and the quality of your code is always high"]
 [:li "Speclj - speclj is a high quality clojure testing framework that can be applied not just web development but any clojure project"]
 [:li "MVC with a twist - Joodo's MVC design does things a little differently than Rails.  Discovering those differences can help you become a better web developer, even if you're the biggest of Rails fans"]
 ]
[:h4 "Understanding the Tutorial Work Flow"]
[:p "This tutorial uses Test Driven Development Techniques.  That means that before writing any code we'll write tests for that code first.  This takes a little getting used to but it reaps huge rewards in terms of generating high quality code."]


[:h3 "Step 1: Create the App Skeleton"]
[:h4 "Creating A New App"]
[:p "If you have followed our " [:a {:href "/"} "installation instructions"] " creating our starting point is as simple as running the following command, where sample_app is the name you'd like to give your application:"]
[:pre {:class "brush: clojure"} "lein new joodo sample_app"]
[:p "To see what that made for us, change into the sample_app's directory in terminal (" [:b "cd sample_app"] ") and download the project's dependencies:"]
[:pre {:class "brush: clojure"}
 "lein deps"]
[:p "Now, start the local server with the following command:"]
[:pre {:class "brush: clojure"} "lein ring server"]
[:p "Then go to " [:a {:href "http://localhost:3000" :target "_blank"} "http://localhost:3000"] " in your favorite browser, where you should see the joodo welcome page."]

[:h4 "Directory Structure"]
[:p "Open up the sample app directory to take a look at the files. Your directory should look like this:"]
[:div.body-image [:img {:src "/images/directory.jpg"}]]
[:p "As you can see, both your /src and /spec (test) directories are already created, with clojure (clj) and clojurescript (cljs) subdirectories"]
[:p "you should note (1) the project.clj file found at the root directory level and (2) the src/clj/sample_app/core.clj file, which is the most important file in your Joodo project."]

[:h4 "Setting Up Your Project.clj File"]
[:p "The heart of any Leiningen project is the " [:b "project.clj"] " file. This file lists information about your project. You can add descriptions, change version numbers, add dependencies, and much more in this file. More info about the project.clj file can be found on the " [:a {:href "https://github.com/technomancy/leiningen/blob/master/README.md" :target "_blank"} "latest tutorial"] " on Leiningen's github account. Joodo's default project.clj is adequate for this tutorial."]



[:h3 "Step 2: Set up Your Main.clj File"]
[:p "The most important file in your project is the " [:b "src/clj/sample_app/main.clj"] "."]
[:pre {:class "brush: clojure"}
 "(ns sample_app.main
   (:require [compojure.core :refer :all]
             [compojure.handler :as handler]
             [compojure.route :as route]
             [joodo.env :as env]
             [joodo.middleware.asset-fingerprint :refer [wrap-asset-fingerprint]]
             [joodo.middleware.favicon :refer [wrap-favicon-bouncer]]
             [joodo.middleware.keyword-cookies :refer [wrap-keyword-cookies]]
             [joodo.middleware.request :refer [wrap-bind-request]]
             [joodo.middleware.util :refer [wrap-development-maybe]]
             [joodo.middleware.view-context :refer [wrap-view-context]]
             [joodo.views :refer [render-template render-html]]
             [ring.middleware.file-info :refer [wrap-file-info]]
             [ring.middleware.flash :refer [wrap-flash]]
             [ring.middleware.head :refer [wrap-head]]
             [ring.middleware.keyword-params :refer [wrap-keyword-params]]
             [ring.middleware.multipart-params :refer [wrap-multipart-params]]
             [ring.middleware.params :refer [wrap-params]]
             [ring.middleware.resource :refer [wrap-resource]]
             [ring.middleware.session :refer [wrap-session]]
             [shoreleave.middleware.rpc :refer [wrap-rpc]]
             ))

 (env/load-configurations)

 (defroutes app-routes
   (GET \"/\" [] (render-template \"index\"))
   (route/not-found (render-template \"not_found\" :template-root \"sample_app\" :ns `sample_app.view-helpers)))

 (def app-handler
   (->
     app-routes
     (wrap-view-context :template-root \"sample_app\" :ns `sample_app.view-helpers)
     wrap-rpc))

 (def app
   (-> app-handler
       wrap-development-maybe
       wrap-bind-request
       wrap-keyword-params
       wrap-params
       wrap-multipart-params
       wrap-flash
       wrap-keyword-cookies
       wrap-session
       wrap-favicon-bouncer
       (wrap-resource \"public\")
       wrap-asset-fingerprint
       wrap-file-info
       wrap-head))
 "]

[:p "By default there are three sections of main.clj. It is important to keep in mind that you can modify/add sections to fit your project's needs. These are just there to get you started."]
[:p "The " [:b "first section"] " declares the file's namespace and lists all of the file's dependencies. If you want a deeper look into what root.clj does you can find the method/macro definitions that are being used in this section."]
[:p (str "The <b> second section</b> is the (defroutes app-routes) function. This function is your top level routing function."
    "By default it sets a GET request on the '/' route to render a pre-made index page."
    "It also tells the application to render a pre-made 404 page if a non-existent route is accessed.")]
[:p "The " [:b "third section"] " is the app and app-handler functions.  They wraps information around the request. By default, the only property explicitly being wrapped is the view context. It sets the template root to the view directory and sets all of the view's namespaces to a view-helper. It is important to note that the template-root represents the location of view pages with a relative path starting at your project's src directory."]
[:p "Since our sample application will be pretty standard, we don't need to modify this file."]
[:br][:br]
[:a {:href "/tutorial/controllers"} "Next Step (Controllers) -->"]
